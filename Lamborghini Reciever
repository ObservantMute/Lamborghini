#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include <Servo.h>

Servo steerServo; //Attached to Servo 1
Servo speedServo; //Attached to Servo 2
int steerServoVal; //Values mapped to 0-180 from RF24 Values
int speedServoVal;
int reversePin = 2;

RF24 radio(7, 8); // CSN, CE

struct package{
  uint16_t encVal;
  uint16_t XVal;
  uint16_t YVal;
  uint16_t potButtonVal;
  uint16_t switchVal;
  };

typedef struct package Package;
Package data;

byte addresses[][6] = {"0"}; 

void setup() {
  radio.begin(); 
  radio.setChannel(115);  //115 band above WIFI signals
  radio.setPALevel(RF24_PA_MIN); //MIN power low rage
  radio.setDataRate( RF24_250KBPS ) ;  //Minimum speed

  pinMode(reversePin, OUTPUT);
  
  steerServo.attach(10);
  speedServo.attach(9);

  steerServo.write(90);
  speedServo.write(90);

  Serial.begin(9600);
}

void loop() {
  ReadData();
  //DataProcessing();
  speedServoVal = map(data.YVal, 0, 1024, 0, 180);
  steerServoVal = map(data.XVal, 0, 1024, 25, 125);
  
  steerServo.write(steerServoVal);
  speedServo.write(speedServoVal);
  
  if(data.switchVal == 1){
    digitalWrite(reversePin, LOW);  
  }else{
    digitalWrite(reversePin, HIGH);
  }
  
  //SerialPrint();
  Serial.print("Steering: ");
  Serial.println(steerServoVal);
  Serial.print(" Speed: ");
  Serial.println(speedServoVal);
  Serial.print(" Reverse: ");
  Serial.println(data.switchVal);
}

void ReadData(){
  radio.openReadingPipe(1, 0xF0F0F0F0AA); //Which pipe to read, 40 bit Address
  radio.startListening(); //Stop Transminting and start Reveicing 
  if ( radio.available()){
    while (radio.available()){
      radio.read( &data, sizeof(data));
    }
  }else {
    Serial.println("no data");
    steerServoVal = 90;
    speedServoVal = 0;
  }
}

/*void DataProcessing(){
  speedServoVal = map(data.YVal, 0, 1024, 0, 180);
  steerServoVal = map(data.XVal, 0, 1024, 25, 125);
  //Horn?
}

void SerialPrint(){
  Serial.print("Steering: ");
  Serial.println(steerServoVal);
  Serial.print(" Speed: ");
  Serial.println(speedServoVal);
}*/
